import requests
import datetime
import pytz
import logging
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='weather_bot.log', 
    level=logging.INFO,  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ INFO –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = "7409034572:AAEomEwpuKdBgJsI7BJPm-Cx-GogBsrofvQ"
TELEGRAM_CHANNEL_ID = "-1002558606938"
OPENWEATHER_API_KEY = "8c1d561d0e5214acd00561ab8ff73f77"
CITY = "–ü–µ—Ä–µ–≥–æ—Ä–∏—á–∏"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –≥–æ—Ä–æ–¥
TIMEZONE = "Europe/Moscow"  # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≥–æ—Ä–æ–¥–∞
MAX_RETRIES = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

def get_tomorrows_detailed_forecast():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —Å —à–∞–≥–æ–º 3 —á–∞—Å–∞"""
    retries = 0
    while retries < MAX_RETRIES:
        try:
            # –ü–æ–ª—É—á–∞–µ–º 5-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ (40 –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ 3 —á–∞—Å–∞)
            url = f"http://api.openweathermap.org/data/2.5/forecast?q={CITY}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
            response = requests.get(url, timeout=10).json()
            
            if response.get('cod') != '200':
                error_msg = response.get('message', 'Unknown error')
                logger.error(f"OpenWeatherMap error: {error_msg}")
                return None

            # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
            tz = pytz.timezone(TIMEZONE)
            now = datetime.datetime.now(tz)
            tomorrow = now.date() + datetime.timedelta(days=1)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            forecasts = []
            for item in response.get('list', []):
                forecast_time = datetime.datetime.fromtimestamp(item['dt'], tz=tz)
                if forecast_time.date() == tomorrow:
                    forecasts.append({
                        'time': forecast_time,
                        'hour': forecast_time.hour,
                        'temp': item['main']['temp'],
                        'feels_like': item['main']['feels_like'],
                        'description': item['weather'][0]['description'],
                        'humidity': item['main']['humidity'],
                        'wind': item['wind']['speed'],
                        'icon': item['weather'][0]['icon'],
                        'pressure': item['main']['pressure'],
                        'clouds': item['clouds']['all']
                    })
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if not forecasts:
                logger.warning(f"No forecast found for tomorrow ({tomorrow})")
                return None
                
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            forecasts.sort(key=lambda x: x['time'])
            
            return {
                'date': tomorrow.strftime("%d.%m.%Y"),
                'weekday': tomorrow.strftime("%A").capitalize(),  # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                'forecasts': forecasts
            }
            
        except requests.exceptions.RequestException as e:
            logger.error(f"Request failed: {e}")
            retries += 1
            if retries < MAX_RETRIES:
                logger.info(f"Retrying... ({retries}/{MAX_RETRIES})")
                time.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                
        except Exception as e:
            logger.exception("Unexpected error in get_tomorrows_detailed_forecast")
            return None
            
    logger.error(f"Failed to get forecast after {MAX_RETRIES} attempts")
    return None

def send_to_telegram(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram-–∫–∞–Ω–∞–ª"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHANNEL_ID,
            "text": message,
            "parse_mode": "HTML",
"disable_web_page_preview": True
        }
        response = requests.post(url, json=payload, timeout=10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        if response.status_code != 200:
            logger.error(f"Telegram API error: {response.status_code} - {response.text}")
            return False
            
        return True
        
    except Exception as e:
        logger.exception("Error in send_to_telegram")
        return False

# –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–≥–æ–¥—ã
WEATHER_ICONS = {
    '01d': '‚òÄÔ∏è',  # —è—Å–Ω–æ (–¥–µ–Ω—å)
    '01n': 'üåô',  # —è—Å–Ω–æ (–Ω–æ—á—å)
    '02d': '‚õÖÔ∏è',  # –º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ (–¥–µ–Ω—å)
    '02n': '‚òÅÔ∏èüåô', # –º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ (–Ω–æ—á—å)
    '03d': '‚òÅÔ∏è',  # –æ–±–ª–∞—á–Ω–æ
    '03n': '‚òÅÔ∏è',  
    '04d': 'üå•',  # –ø–∞—Å–º—É—Ä–Ω–æ
    '04n': 'üå•',  
    '09d': 'üåß',  # –¥–æ–∂–¥—å
    '09n': 'üåß',  
    '10d': 'üå¶',  # –¥–æ–∂–¥—å —Å —Å–æ–ª–Ω—Ü–µ–º
    '10n': 'üåß',  
    '11d': '‚õà',  # –≥—Ä–æ–∑–∞
    '11n': '‚õà',  
    '13d': '‚ùÑÔ∏è',  # —Å–Ω–µ–≥
    '13n': '‚ùÑÔ∏è',  
    '50d': 'üå´',  # —Ç—É–º–∞–Ω
    '50n': 'üå´'   
}

# –ò–∫–æ–Ω–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
HOUR_ICONS = {
    0: 'üåô', 3: 'üåô', 6: 'üåÖ', 9: 'üå§Ô∏è', 
    12: '‚òÄÔ∏è', 15: 'üåû', 18: 'üåá', 21: 'üåÉ'
}

def get_hour_icon(hour):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
    for h, icon in sorted(HOUR_ICONS.items(), reverse=True):
        if hour >= h:
            return icon
    return 'üïí'

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
def main():
    logger.info("Starting weather forecast script")
    
    forecast = get_tomorrows_detailed_forecast()
    
    if not forecast:
        error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        logger.error(error_msg)
        send_to_telegram(error_msg)
        return

    try:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏
        weekday_icons = {
            "Monday": "üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "Tuesday": "üìÖ –í—Ç–æ—Ä–Ω–∏–∫",
            "Wednesday": "üìÖ –°—Ä–µ–¥–∞",
            "Thursday": "üìÖ –ß–µ—Ç–≤–µ—Ä–≥",
            "Friday": "üìÖ –ü—è—Ç–Ω–∏—Ü–∞",
            "Saturday": "üéâ –°—É–±–±–æ—Ç–∞",
            "Sunday": "üåü –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }
        
        weekday_icon = weekday_icons.get(forecast['weekday'], "üìÖ")
        
        message = (
            f"<b>{weekday_icon} {forecast['weekday']}, {forecast['date']}</b>\n"
            f"üìç –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ <b>{CITY}</b>\n\n"
            f"<b>üïí –í—Ä–µ–º—è  |  üå§Ô∏è –ü–æ–≥–æ–¥–∞  |  üå°Ô∏è –¢–µ–º–ø.  |  üí® –í–µ—Ç–µ—Ä  |  üíß –í–ª–∞–∂–Ω.</b>\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π 3-—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑
        for f in forecast['forecasts']:
            # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –ø–æ–≥–æ–¥—ã
            weather_icon = WEATHER_ICONS.get(f['icon'], 'üå§Ô∏è')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
            hour_icon = get_hour_icon(f['hour'])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            time_str = f['time'].strftime("%H:%M")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É (—Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è)
            temp = f['temp']
            temp_color = ""
            if temp < 0:
                temp_color = "üîµ"  # –æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ
            elif temp < 10:
                temp_color = "üü¶"  # —Ö–æ–ª–æ–¥–Ω–æ
            elif temp < 20:
                temp_color = "üü©"  # –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ
            elif temp < 30:
                temp_color = "üüß"  # —Ç–µ–ø–ª–æ
            else:
                temp_color = "üü•"  # –∂–∞—Ä–∫–æ
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–µ—Ç–µ—Ä
            wind = f['wind']
            wind_icon = "üçÉ" if wind < 1 else "üí®" if wind < 5 else "üå¨Ô∏è"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–ª–∞–∂–Ω–æ—Å—Ç—å
            humidity = f['humidity']
            humidity_icon = "üíß"
            if humidity < 30:
                humidity_icon = "üèúÔ∏è"
            elif humidity > 80:
                humidity_icon = "üåä"
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞
            # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
            description = f['description'].capitalize()
            if len(description) > 15:
                description = description[:12] + ".."
                
            forecast_line = (
                f"\n{hour_icon} <b>{time_str}</b>  |  "
                f"{weather_icon} {description:<15} |  "
                f"{temp_color} <b>{temp}¬∞C</b> |  "
                f"{wind_icon} <b>{wind} –º/—Å</b> |  "
                f"{humidity_icon} <b>{humidity}%</b>"
            )
            
            message += forecast_line
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏ –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        message += "\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –ø–æ –¥–Ω—é
        try:
            temps = [f['temp'] for f in forecast['forecasts']]
            min_temp = min(temps)
            max_temp = max(temps)
            winds = [f['wind'] for f in forecast['forecasts']]
            avg_wind = round(sum(winds) / len(winds), 1)
            humidities = [f['humidity'] for f in forecast['forecasts']]
            avg_humidity = round(sum(humidities) / len(humidities))
            
            message += (
                f"\n\n<b>üìä –°–≤–æ–¥–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:</b>\n"
                f"üå°Ô∏è –ú–∏–Ω/–º–∞–∫—Å: <b>{min_temp}¬∞C</b> / <b>{max_temp}¬∞C</b>\n"
                f"üí® –í–µ—Ç–µ—Ä: –¥–æ <b>{max(winds)} –º/—Å</b>\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: –≤ —Å—Ä–µ–¥–Ω–µ–º <b>{avg_humidity}%</b>"
            )
        except Exception as e:
            logger.error(f"Error in summary calculation: {e}")
        
        message += "\n\n<i>‚ÑπÔ∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: üîµ<0¬∞C üü¶0-9¬∞C üü©10-19¬∞C üüß20-29¬∞C üü•30+¬∞C</i>"
        message += "\n<i>‚ÑπÔ∏è –í–µ—Ç–µ—Ä: üçÉ<1–º/—Å üí®1-5–º/—Å üå¨Ô∏è>5–º/—Å</i>"
        message += "\n<i>‚ÑπÔ∏è –í–ª–∞–∂–Ω–æ—Å—Ç—å: üèúÔ∏è<30% üíß30-80% üåä>80%</i>"
        message += "\n\n#–ø–æ–≥–æ–¥–∞ #–ø—Ä–æ–≥–Ω–æ–∑ #–∑–∞–≤—Ç—Ä–∞"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        success = send_to_telegram(message)
        if success:
            logger.info("Forecast sent successfully")
        else:
            logger.error("Failed to send forecast")
            
    except Exception as e:
        logger.exception("Error in main processing")
        send_to_telegram("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã")

if __name__ == "__main__":
    main()